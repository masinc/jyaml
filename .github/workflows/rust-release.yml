name: Rust Release

"on":
  push:
    tags:
      - "rust-v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., 0.3.0)"
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Get version from tag or input
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/rust-v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && format('rust-v{0}', github.event.inputs.version) || github.ref }}
          release_name: "JYAML Rust v${{ steps.get_version.outputs.version }}"
          body: |
            ## JYAML Rust Implementation v${{ steps.get_version.outputs.version }}

            ### What's New
            - Full JYAML 0.3 specification compliance
            - Trailing comma support in flow-style arrays and objects
            - Comprehensive error handling with line/column information
            - Tab character detection and proper error reporting
            - Test suite runner with timeout protection

            ### Installation

            Add to your `Cargo.toml`:
            ```toml
            [dependencies]
            jyaml = "${{ steps.get_version.outputs.version }}"
            ```

            ### Quick Start

            ```rust
            use jyaml::parse;

            let jyaml_text = r#"
            {
              "name": "Alice",
              "age": 30,
            }
            "#;

            let value = parse(jyaml_text)?;
            println!("{:#?}", value);
            ```

            See [CHANGELOG.md](https://github.com/masinc/jyaml/blob/main/implementations/rust/CHANGELOG.md) for detailed changes.
          draft: false
          prerelease: false

  test:
    name: Test Before Release
    uses: ./.github/workflows/rust-test.yml
    with:
      rust-version: "stable"

  build-and-upload:
    name: Build and Upload Assets
    needs: [create-release, test]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: jyaml-test-runner
            asset_name: jyaml-test-runner-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: jyaml-test-runner.exe
            asset_name: jyaml-test-runner-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: jyaml-test-runner
            asset_name: jyaml-test-runner-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: jyaml-test-runner
            asset_name: jyaml-test-runner-macos-aarch64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: implementations/rust
          key: release-${{ matrix.target }}
          shared-key: shared

      - name: Build test runner
        working-directory: implementations/rust
        run: cargo build --example test_file --release --target ${{ matrix.target }}

      - name: Create binary package
        working-directory: implementations/rust
        shell: bash
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/examples/${{ matrix.artifact_name }} dist/
          cp README.md dist/
          cp CHANGELOG.md dist/
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a dist/${{ matrix.asset_name }}.zip dist/*
          else
            tar -czf dist/${{ matrix.asset_name }}.tar.gz -C dist .
          fi

      - name: Upload binary (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: implementations/rust/dist/${{ matrix.asset_name }}.zip
          asset_name: ${{ matrix.asset_name }}.zip
          asset_content_type: application/zip

      - name: Upload binary (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: implementations/rust/dist/${{ matrix.asset_name }}.tar.gz
          asset_name: ${{ matrix.asset_name }}.tar.gz
          asset_content_type: application/gzip

  publish-crate:
    name: Publish to crates.io
    needs: [create-release, test, build-and-upload]
    runs-on: ubuntu-latest
    if: github.repository == 'masinc/jyaml'

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: implementations/rust
          key: publish
          shared-key: shared

      - name: Verify version matches tag
        working-directory: implementations/rust
        run: |
          CARGO_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          TAG_VERSION="${{ needs.create-release.outputs.version }}"
          if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
            echo "Version mismatch: Cargo.toml has $CARGO_VERSION but tag is $TAG_VERSION"
            exit 1
          fi
          echo "Version verification passed: $CARGO_VERSION"

      - name: Publish to crates.io
        working-directory: implementations/rust
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish --allow-dirty
